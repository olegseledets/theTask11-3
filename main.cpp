#include <iostream>

int main(){
  float health, resistance;
  std::cout << "Необходимо вводить значения от 0 до 1\n";
  std::cout << "Введите здоровье орка: ";
  std::cin >> health;
  std::cout << "Введите сопротивляемость орка: ";
  std::cin >> resistance;
  if(health < 0 || health > 1 || resistance < 0 || resistance > 1){
    std::cout << "Необходимо вводить числа в промежутке от 0 до 1!!!";
  } 
  else{
    float power;
    while (health > 0){
      std::cout << "Мощность удара: ";
      std::cin >> power;
      float damage = power * (1.0f - resistance);
      health -= damage;
      if (health < 0){
        health = 0;
      }
      std::cout << "Выстрел фаерболом наносит урон = " << damage << ". Орк теперь имеет " << health << " здоровья\n";
    }
    std::cout << "Орк убит\n";
  }
}

/*
Задача 3. Immolate Improved!
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными шарами разной степени мощности, но у него есть очки здоровья и показатель сопротивляемости магии. Очки здоровья, сопротивляемость магии и мощность огненного шара — это вещественные числа от нуля до единицы включительно. Чем больше мощность, тем больше урон здоровью, но чем больше сопротивляемость магии, тем урон меньше. Например, если сопротивляемость равна нулю (0%), то будет нанесен урон равный мощности огненного шара. Если сопротивляемость равна единице (100%), урон будет равен нулю, даже если мощность заклинания максимальна. Напишите программу, в которой пользователь сначала задаёт количество здоровья и сопротивляемость магии орка, а после стреляет в него огненными шарами разной мощности, пока орк не погибнет. Мощность удара вводится с клавиатуры с каждым выстрелом. После каждого заклинания программа выводит на экран итоговый урон от удара, и оставшиеся очки здоровья орка.
Обеспечьте контроль ввода.
*/